// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/entities/local/deleted_deck_list.dart';
import 'src/entities/local/local_deck.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8546753656038972946),
      name: 'LocalDeck',
      lastPropertyId: const IdUid(12, 2023820308481034022),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5454671332403670420),
            name: 'storageId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6706389698094560920),
            name: 'cover',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1525002010902163713),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6254455630679158198),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3399069002394478499),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1423109101804291383),
            name: 'isPublic',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5662658419217043499),
            name: 'lastModification',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6274551337696428667),
            name: 'tags',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2023820308481034022),
            name: 'dbCards',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6833267490388252936),
      name: 'DeletedDeckList',
      lastPropertyId: const IdUid(2, 7685396987884993804),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7498905827203218270),
            name: 'storageId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7685396987884993804),
            name: 'idList',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6833267490388252936),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5264519296097936001,
        6316416877376486012,
        5969993341138785792
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    LocalDeck: EntityDefinition<LocalDeck>(
        model: _entities[0],
        toOneRelations: (LocalDeck object) => [],
        toManyRelations: (LocalDeck object) => {},
        getId: (LocalDeck object) => object.storageId,
        setId: (LocalDeck object, int id) {
          object.storageId = id;
        },
        objectToFB: (LocalDeck object, fb.Builder fbb) {
          final coverOffset =
              object.cover == null ? null : fbb.writeString(object.cover!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final tagsOffset = object.tags == null
              ? null
              : fbb.writeList(
                  object.tags!.map(fbb.writeString).toList(growable: false));
          final dbCardsOffset = object.dbCards == null
              ? null
              : fbb.writeList(
                  object.dbCards!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(13);
          fbb.addInt64(0, object.storageId);
          fbb.addOffset(1, coverOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, idOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addBool(5, object.isPublic);
          fbb.addInt64(7, object.lastModification);
          fbb.addOffset(10, tagsOffset);
          fbb.addOffset(11, dbCardsOffset);
          fbb.finish(fbb.endTable());
          return object.storageId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LocalDeck(
              storageId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              cover: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              isPublic: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              lastModification:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              tags: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 24))
            ..dbCards = const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                .vTableGetNullable(buffer, rootOffset, 26);

          return object;
        }),
    DeletedDeckList: EntityDefinition<DeletedDeckList>(
        model: _entities[1],
        toOneRelations: (DeletedDeckList object) => [],
        toManyRelations: (DeletedDeckList object) => {},
        getId: (DeletedDeckList object) => object.storageId,
        setId: (DeletedDeckList object, int id) {
          object.storageId = id;
        },
        objectToFB: (DeletedDeckList object, fb.Builder fbb) {
          final idListOffset = fbb.writeList(
              object.idList.map(fbb.writeString).toList(growable: false));
          fbb.startTable(3);
          fbb.addInt64(0, object.storageId);
          fbb.addOffset(1, idListOffset);
          fbb.finish(fbb.endTable());
          return object.storageId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DeletedDeckList(
              idList: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 6, []),
              storageId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [LocalDeck] entity fields to define ObjectBox queries.
class LocalDeck_ {
  /// see [LocalDeck.storageId]
  static final storageId =
      QueryIntegerProperty<LocalDeck>(_entities[0].properties[0]);

  /// see [LocalDeck.cover]
  static final cover =
      QueryStringProperty<LocalDeck>(_entities[0].properties[1]);

  /// see [LocalDeck.description]
  static final description =
      QueryStringProperty<LocalDeck>(_entities[0].properties[2]);

  /// see [LocalDeck.id]
  static final id = QueryStringProperty<LocalDeck>(_entities[0].properties[3]);

  /// see [LocalDeck.name]
  static final name =
      QueryStringProperty<LocalDeck>(_entities[0].properties[4]);

  /// see [LocalDeck.isPublic]
  static final isPublic =
      QueryBooleanProperty<LocalDeck>(_entities[0].properties[5]);

  /// see [LocalDeck.lastModification]
  static final lastModification =
      QueryIntegerProperty<LocalDeck>(_entities[0].properties[6]);

  /// see [LocalDeck.tags]
  static final tags =
      QueryStringVectorProperty<LocalDeck>(_entities[0].properties[7]);

  /// see [LocalDeck.dbCards]
  static final dbCards =
      QueryStringVectorProperty<LocalDeck>(_entities[0].properties[8]);
}

/// [DeletedDeckList] entity fields to define ObjectBox queries.
class DeletedDeckList_ {
  /// see [DeletedDeckList.storageId]
  static final storageId =
      QueryIntegerProperty<DeletedDeckList>(_entities[1].properties[0]);

  /// see [DeletedDeckList.idList]
  static final idList =
      QueryStringVectorProperty<DeletedDeckList>(_entities[1].properties[1]);
}
